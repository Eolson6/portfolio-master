{"ast":null,"code":"import _regeneratorRuntime from \"/Users/erbear/primeTier2/sagas-portfolio-master/node_modules/@babel/runtime/regenerator\";\nvar _jsxFileName = \"/Users/erbear/primeTier2/sagas-portfolio-master/src/index.js\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(rootSaga),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(getProjects);\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App.js';\nimport registerServiceWorker from './registerServiceWorker';\nimport { createStore, combineReducers, applyMiddleware } from 'redux'; // Provider allows us to use redux within our react app\n\nimport { Provider } from 'react-redux';\nimport logger from 'redux-logger'; // Import saga middleware\n\nimport createSagaMiddleware from 'redux-saga'; // Create the rootSaga generator function\n\nfunction rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return takeEvery('GET_PROJECTS', getProjects);\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this);\n} // Create sagaMiddleware\n\n\nvar sagaMiddleware = createSagaMiddleware(); // Used to store projects returned from the server\n\nvar projectsReducer = function projectsReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'SET_PROJECTS':\n      return action.payload;\n\n    default:\n      return state;\n  }\n}; // Used to store the project tags (e.g. 'React', 'jQuery', 'Angular', 'Node.js')\n\n\nvar tags = function tags() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'SET_TAGS':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nfunction getProjects(action) {\n  var favorites, nextAction;\n  return _regeneratorRuntime.wrap(function getProjects$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return axios.get('/projects', action.payload);\n\n        case 3:\n          favorites = _context2.sent;\n          nextAction = {\n            type: 'GET_PROJECTS'\n          };\n          _context2.next = 7;\n          return put(nextAction);\n\n        case 7:\n          _context2.next = 13;\n          break;\n\n        case 9:\n          _context2.prev = 9;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.log('error in get', _context2.t0);\n          alert(_context2.t0);\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, this, [[0, 9]]);\n} // Create one store that all components can use\n\n\nvar storeInstance = createStore(combineReducers({\n  projectsReducer: projectsReducer,\n  tags: tags\n}), // Add sagaMiddleware to our store\napplyMiddleware(sagaMiddleware, logger)); // Pass rootSaga into our sagaMiddleware\n\nsagaMiddleware.run(rootSaga);\nReactDOM.render(React.createElement(Provider, {\n  store: storeInstance,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 67\n  },\n  __self: this\n}, React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 67\n  },\n  __self: this\n})), document.getElementById('root'));\nregisterServiceWorker();","map":{"version":3,"sources":["/Users/erbear/primeTier2/sagas-portfolio-master/src/index.js"],"names":["rootSaga","getProjects","React","ReactDOM","App","registerServiceWorker","createStore","combineReducers","applyMiddleware","Provider","logger","createSagaMiddleware","takeEvery","sagaMiddleware","projectsReducer","state","action","type","payload","tags","axios","get","favorites","nextAction","put","console","log","alert","storeInstance","run","render","document","getElementById"],"mappings":";;;;;yBAaUA,Q;;;yBA4BAC,W;;AAzCV,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,yBAAhB;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D,C,CACA;;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,MAAP,MAAmB,cAAnB,C,CACA;;AACA,OAAOC,oBAAP,MAAiC,YAAjC,C,CAEA;;AACA,SAAUX,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMY,SAAS,CAAC,cAAD,EAAiBX,WAAjB,CAAf;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAKA;;;AACA,IAAMY,cAAc,GAAGF,oBAAoB,EAA3C,C,CAEA;;AACA,IAAMG,eAAe,GAAG,SAAlBA,eAAkB,GAAwB;AAAA,MAAvBC,KAAuB,uEAAf,EAAe;AAAA,MAAXC,MAAW;;AAC5C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,cAAL;AACI,aAAOD,MAAM,CAACE,OAAd;;AACJ;AACI,aAAOH,KAAP;AAJR;AAMH,CAPD,C,CASA;;;AACA,IAAMI,IAAI,GAAG,SAAPA,IAAO,GAAwB;AAAA,MAAvBJ,KAAuB,uEAAf,EAAe;AAAA,MAAXC,MAAW;;AACjC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,UAAL;AACI,aAAOD,MAAM,CAACE,OAAd;;AACJ;AACI,aAAOH,KAAP;AAJR;AAMH,CAPD;;AASA,SAAUd,WAAV,CAAsBe,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAE0B,iBAAMI,KAAK,CAACC,GAAN,CAAU,WAAV,EAAuBL,MAAM,CAACE,OAA9B,CAAN;;AAF1B;AAEcI,UAAAA,SAFd;AAGcC,UAAAA,UAHd,GAG2B;AAACN,YAAAA,IAAI,EAAE;AAAP,WAH3B;AAAA;AAIQ,iBAAMO,GAAG,CAAED,UAAF,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAMQE,UAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAC,UAAAA,KAAK,cAAL;;AAPR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAYA;;;AACA,IAAMC,aAAa,GAAGtB,WAAW,CAC7BC,eAAe,CAAC;AACZO,EAAAA,eAAe,EAAfA,eADY;AAEZK,EAAAA,IAAI,EAAJA;AAFY,CAAD,CADc,EAK7B;AACAX,eAAe,CAACK,cAAD,EAAiBH,MAAjB,CANc,CAAjC,C,CASA;;AACAG,cAAc,CAACgB,GAAf,CAAmB7B,QAAnB;AAEAG,QAAQ,CAAC2B,MAAT,CAAgB,oBAAC,QAAD;AAAU,EAAA,KAAK,EAAEF,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAgC,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhC,CAAhB,EACIG,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CADJ;AAEA3B,qBAAqB","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App.js';\nimport registerServiceWorker from './registerServiceWorker';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\n// Provider allows us to use redux within our react app\nimport { Provider } from 'react-redux';\nimport logger from 'redux-logger';\n// Import saga middleware\nimport createSagaMiddleware from 'redux-saga';\n\n// Create the rootSaga generator function\nfunction* rootSaga() {\n    yield takeEvery('GET_PROJECTS', getProjects)\n\n}\n\n// Create sagaMiddleware\nconst sagaMiddleware = createSagaMiddleware();\n\n// Used to store projects returned from the server\nconst projectsReducer = (state = [], action) => {\n    switch (action.type) {\n        case 'SET_PROJECTS':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\n// Used to store the project tags (e.g. 'React', 'jQuery', 'Angular', 'Node.js')\nconst tags = (state = [], action) => {\n    switch (action.type) {\n        case 'SET_TAGS':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\nfunction* getProjects(action) {\n    try {\n        const favorites = yield axios.get('/projects', action.payload);\n        const nextAction = {type: 'GET_PROJECTS' };\n        yield put (nextAction)\n    } catch(error) {\n        console.log('error in get', error);\n        alert (error)\n        \n    }\n}\n\n// Create one store that all components can use\nconst storeInstance = createStore(\n    combineReducers({\n        projectsReducer,\n        tags,\n    }),\n    // Add sagaMiddleware to our store\n    applyMiddleware(sagaMiddleware, logger),\n);\n\n// Pass rootSaga into our sagaMiddleware\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(<Provider store={storeInstance}><App /></Provider>, \n    document.getElementById('root'));\nregisterServiceWorker();\n"]},"metadata":{},"sourceType":"module"}