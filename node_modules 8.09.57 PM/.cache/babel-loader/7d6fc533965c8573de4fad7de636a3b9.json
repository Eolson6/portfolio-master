{"ast":null,"code":"import _regeneratorRuntime from \"/Users/erbear/primeTier2/sagas-portfolio-master/node_modules/@babel/runtime/regenerator\";\nvar _jsxFileName = \"/Users/erbear/primeTier2/sagas-portfolio-master/src/index.js\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(rootSaga);\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App.js';\nimport registerServiceWorker from './registerServiceWorker';\nimport { createStore, combineReducers, applyMiddleware } from 'redux'; // Provider allows us to use redux within our react app\n\nimport { Provider } from 'react-redux';\nimport logger from 'redux-logger'; // Import saga middleware\n\nimport createSagaMiddleware from 'redux-saga'; // Create the rootSaga generator function\n\nfunction rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return takeEvery('FETCH_PROJECTS', getProjects);\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this);\n} // Create sagaMiddleware\n\n\nvar sagaMiddleware = createSagaMiddleware(); // Used to store projects returned from the server\n\nvar projects = function projects() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'SET_PROJECTS':\n      return action.payload;\n\n    default:\n      return state;\n  }\n}; // Used to store the project tags (e.g. 'React', 'jQuery', 'Angular', 'Node.js')\n\n\nvar tags = function tags() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'SET_TAGS':\n      return action.payload;\n\n    default:\n      return state;\n  }\n}; // Create one store that all components can use\n\n\nvar storeInstance = createStore(combineReducers({\n  projects: projects,\n  tags: tags\n}), // Add sagaMiddleware to our store\napplyMiddleware(sagaMiddleware, logger)); // Pass rootSaga into our sagaMiddleware\n\nsagaMiddleware.run(rootSaga);\nReactDOM.render(React.createElement(Provider, {\n  store: storeInstance,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 57\n  },\n  __self: this\n}, React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 57\n  },\n  __self: this\n})), document.getElementById('root'));\nregisterServiceWorker();","map":{"version":3,"sources":["/Users/erbear/primeTier2/sagas-portfolio-master/src/index.js"],"names":["rootSaga","React","ReactDOM","App","registerServiceWorker","createStore","combineReducers","applyMiddleware","Provider","logger","createSagaMiddleware","takeEvery","getProjects","sagaMiddleware","projects","state","action","type","payload","tags","storeInstance","run","render","document","getElementById"],"mappings":";;;;;yBAaUA,Q;;AAbV,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,yBAAhB;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D,C,CACA;;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,MAAP,MAAmB,cAAnB,C,CACA;;AACA,OAAOC,oBAAP,MAAiC,YAAjC,C,CAEA;;AACA,SAAUV,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMW,SAAS,CAAC,gBAAD,EAAmBC,WAAnB,CAAf;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAKA;;;AACA,IAAMC,cAAc,GAAGH,oBAAoB,EAA3C,C,CAEA;;AACA,IAAMI,QAAQ,GAAG,SAAXA,QAAW,GAAwB;AAAA,MAAvBC,KAAuB,uEAAf,EAAe;AAAA,MAAXC,MAAW;;AACrC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,cAAL;AACI,aAAOD,MAAM,CAACE,OAAd;;AACJ;AACI,aAAOH,KAAP;AAJR;AAMH,CAPD,C,CASA;;;AACA,IAAMI,IAAI,GAAG,SAAPA,IAAO,GAAwB;AAAA,MAAvBJ,KAAuB,uEAAf,EAAe;AAAA,MAAXC,MAAW;;AACjC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,UAAL;AACI,aAAOD,MAAM,CAACE,OAAd;;AACJ;AACI,aAAOH,KAAP;AAJR;AAMH,CAPD,C,CAWA;;;AACA,IAAMK,aAAa,GAAGf,WAAW,CAC7BC,eAAe,CAAC;AACZQ,EAAAA,QAAQ,EAARA,QADY;AAEZK,EAAAA,IAAI,EAAJA;AAFY,CAAD,CADc,EAK7B;AACAZ,eAAe,CAACM,cAAD,EAAiBJ,MAAjB,CANc,CAAjC,C,CASA;;AACAI,cAAc,CAACQ,GAAf,CAAmBrB,QAAnB;AAEAE,QAAQ,CAACoB,MAAT,CAAgB,oBAAC,QAAD;AAAU,EAAA,KAAK,EAAEF,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAgC,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhC,CAAhB,EACIG,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CADJ;AAEApB,qBAAqB","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App.js';\nimport registerServiceWorker from './registerServiceWorker';\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\n// Provider allows us to use redux within our react app\nimport { Provider } from 'react-redux';\nimport logger from 'redux-logger';\n// Import saga middleware\nimport createSagaMiddleware from 'redux-saga';\n\n// Create the rootSaga generator function\nfunction* rootSaga() {\n    yield takeEvery('FETCH_PROJECTS', getProjects)\n\n}\n\n// Create sagaMiddleware\nconst sagaMiddleware = createSagaMiddleware();\n\n// Used to store projects returned from the server\nconst projects = (state = [], action) => {\n    switch (action.type) {\n        case 'SET_PROJECTS':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\n// Used to store the project tags (e.g. 'React', 'jQuery', 'Angular', 'Node.js')\nconst tags = (state = [], action) => {\n    switch (action.type) {\n        case 'SET_TAGS':\n            return action.payload;\n        default:\n            return state;\n    }\n}\n\n\n\n// Create one store that all components can use\nconst storeInstance = createStore(\n    combineReducers({\n        projects,\n        tags,\n    }),\n    // Add sagaMiddleware to our store\n    applyMiddleware(sagaMiddleware, logger),\n);\n\n// Pass rootSaga into our sagaMiddleware\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(<Provider store={storeInstance}><App /></Provider>, \n    document.getElementById('root'));\nregisterServiceWorker();\n"]},"metadata":{},"sourceType":"module"}